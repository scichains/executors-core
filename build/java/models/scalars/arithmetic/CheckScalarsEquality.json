{
  "app": "executor",
  "version": "0.0.1",
  "category": "scalars.arithmetic",
  "name": "Check equality of 2 scalars",
  "tags": ["scalars"],
  "id": "a5bfd500-0c13-431b-a736-13be5e0dfc67",
  "language": "java",
  "java": {
    "class": "net.algart.executors.modules.core.scalars.arithmetic.CheckScalarsEquality"
  },
  "in_ports": [
    {
      "value_type": "scalar",
      "name": "x"
    },
    {
      "value_type": "scalar",
      "name": "y"
    }
  ],
  "out_ports": [
    {
      "value_type": "scalar",
      "name": "output"
    }
  ],
  "controls": [
    {
      "caption": "What to check?",
      "name": "comparisonMode",
      "description": "When checking equality (x = y), result will be true if both strings x and y are identical or if both are not specified (ports are not initialized), or false in other case (in particular, if one of x or y is specified, but the other is not).\nWhen checking inequality x ≠ y), result is opposite.",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "EQUAL",
          "caption": "x = y (equality)"
        },
        {
          "value": "UNEQUAL",
          "caption": "x ≠ y (inequality)"
        }
      ],
      "default": "EQUAL"
    },
    {
      "caption": "What to do when result is false?",
      "name": "actionOnFail",
      "description": "If you select \"throw exception\", this function never returns false; instead, it throws AssertionError. Note: it is a low-level error, that signals about a problem in the algorithm; it is not a message for end user.",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "RETURN_FALSE",
          "caption": "return false (scalar)"
        },
        {
          "value": "THROW_EXCEPTION",
          "caption": "throw exception (AssertionError)"
        }
      ],
      "default": "RETURN_FALSE"
    },
    {
      "caption": "Numeric comparison",
      "name": "numericComparison",
      "description": "If set, the input values \"x\" and \"y\" must be correctly written decimal numbers, and this function compares these numeric values instead of strings. For example, values \"100.0\" and \"100\" will be considered to be equal, as well as \"0.0\" and \"-0.0\".\nIn this mode, if one of the input values is not a number or is not initialized, an exception will be thrown.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": false
    },
    {
      "caption": "What output is true",
      "name": "booleanStyle",
      "description": "What output string will be returned for true and what for false.\n\nC-like: true is non-zero number or non-empty string, containing not a number, false is 0, 0.0 or empty string.\n\nJava-like: true is \"true\" string (ignoring case), false is any other string.\n\nNote that \"true\" string, according these rules, is considered to be true in all modes.",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "C_LIKE",
          "caption": "C-like"
        },
        {
          "value": "JAVA_LIKE",
          "caption": "Java-like"
        }
      ],
      "default": "JAVA_LIKE"
    }
  ]
}