{
  "app": "executor",
  "version": "0.0.1",
  "category": "files",
  "name": "List of files in a folder",
  "tags": ["files"],
  "id": "4ae7694d-0070-4644-a96d-5fa5b6414058",
  "language": "java",
  "java": {
    "class": "net.algart.executors.modules.core.files.ListOfFiles"
  },
  "in_ports": [
    {
      "value_type": "scalar",
      "name": "file",
      "caption": "file/folder",
      "hint": "[Optional] String path to the file or folder. If specified, it is used instead of \"File/folder\" parameter (with all replacements performed in that parameter)."
    }
  ],
  "out_ports": [
    {
      "value_type": "scalar",
      "name": "output",
      "hint": "Sorted list of all files/subfolders in the folder, specified by \"File/folder\" parameter, separated by \\n,\nor the single line containing this parameter if it is a file or if \"Return 1 path\" is set."
    },
    {
      "value_type": "scalar",
      "name": "absolute_path",
      "caption": "absolute path",
      "hint": "Actual full absolute path to the file/folder."
    }
  ],
  "controls": [
    {
      "caption": "File/folder",
      "name": "file",
      "description": "Folder to scan or file to return. If it is a folder, this function finds all files/subfolders in this folder, matching \"Globbing pattern\" parameter, and returns them in a list of lines separated by \\n. If it is an existing regular file, this function just returns its name.\nYou can use here relative paths (without starting \"/\" or \"c:\\\"), for example, \"test\" or \"samples/test\". They will be resolved relative the current folder, containing the executed chain.\nIf this path starts with substring %TEMP%, %TEMP%/ or %TEMP%x. where x is OS-depended file separator character, this substring is replaced with the full path to the system temp directory (System.getProperty(\"java.io.tmpdir\")) with ending file separator. For example, it is correct to write here %TEMP%my_folder, %TEMP%/my_folder or (in Windows) %TEMP%\\my_folder.\nAlso you can use in this string Java system properties: \"${name}\", for example: \"${java.io.tmpdir}\", and executor system properties \"${path.name.ext}\", \"${path.name}\", \"${file.name.ext}\", \"${file.name}\", \"${resources}\" (chain path/file name with/without extension, resource folder of the platform, containing this function).",
      "value_type": "String",
      "edition_type": "folder",
      "default": ""
    },
    {
      "caption": "Globbing pattern",
      "name": "globPattern",
      "description": "This function finds all files/folders, matching the specified pattern: see \"getPathMatcher\" Java method. This pattern is used ONLY if the file/folder parameter actually specifies a folder; it is not used in the case of a regular file.\nTypical examples: * (all files/folders), *.* (file names containing a dot), *.{jpeg,jpg,png,gif,bmp} (files with the specified extensions).",
      "value_type": "String",
      "edition_type": "value",
      "default": "*"
    },
    {
      "caption": "Regular expression",
      "name": "regularExpression",
      "description": "If this parameter is non-empty (contains some non-space character), it must contain some regular expression (leading and trailing space are removed). Every path, matching the \"Globbing pattern\", is additionally checked that it also matches this regular expression, and if does not, it is removed from the result list.\nIn other words, you may specify * in \"Globbing pattern\" (i.e. \"any path\") and use the regular expression to detect, do you need a file/folder or no.\nExample: .*\\.(txt|dat)$  means all paths ending with \".txt\" or \".dat\".\nNote: this regular expression is checked BEFORE corrections of file names, specified by \"Absolute paths\" and \"Remove extensions\" parameters. In particular, the checked path is usually absolute.",
      "value_type": "String",
      "edition_type": "value",
      "advanced": true,
      "default": ""
    },
    {
      "caption": "How to sort the result list",
      "name": "sortOrder",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "STANDARD",
          "caption": "Standard (alphabetically)"
        },
        {
          "value": "SUBDIRECTORIES_FIRST",
          "caption": "Alphabetically, but subdirectories before files"
        },
        {
          "value": "SUBDIRECTORIES_LAST",
          "caption": "Alphabetically, but files before subdirectories"
        }
      ],
      "default": "STANDARD"
    },
    {
      "caption": "Return 1 path",
      "name": "singlePath",
      "description": "If this flag is set, as well as if \"File/folder\" is an existing regular file, this function does not perform scanning and just returns \"File/folder\" parameter as the single result. \"Globbing pattern\" is ignored in this case.\nThis feature should be useful if the output list of files is passed into some function, that sometimes works with a single file/folder, but sometimes with a series of files. For example, it can be a function for reading array of images either from a given TIFF, or from some set of files/folders specified by user: in this case, this flag can control desired working mode. Usually this flag should be cleared.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": false
    },
    {
      "caption": "Recursive scanning",
      "name": "recursiveScanning",
      "description": "If set, the folder specified above is scanned recursively. If cleared, subfolders of the specified folder are not scanned.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": false
    },
    {
      "caption": "Absolute paths",
      "name": "absolutePaths",
      "description": "If set, the file names in the returned list will be absolute paths.\nIf cleared and \"File/folder\" is a folder (not a file), returned list will contain file names relative this folder.\nNote: if \"File/folder\" is a regular file or if \"Return 1 path\" is set, the returned paths will be always absolute.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": true
    },
    {
      "caption": "Remove extensions",
      "name": "removeExtension",
      "description": "If set, this function automatically removes extensions from every file/folder name in the result list.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": false
    },
    {
      "caption": "Requires existing folder",
      "name": "folderExistenceRequired",
      "description": "If set, the path specified above must correspond to some existing file or folder. If cleared, the file/folder may not exist: in this function will return an empty list.\nNote that this function also returns an empty list if there are no files, matching the specified \"Globbing pattern\".",
      "value_type": "boolean",
      "edition_type": "value",
      "default": true
    }
  ]
}