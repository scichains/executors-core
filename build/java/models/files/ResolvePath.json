{
  "app": "executor",
  "version": "0.0.1",
  "category": "files",
  "name": "Resolve/create path",
  "description": "Adds child path, if it's specified, then checks or creates result folder/file and return its absolute path. May be used in \"no create anything\" mode only for goal to resolve child path.",
  "id": "f9b1709d-6efe-4e55-ac47-63e3116edc49",
  "language": "java",
  "java": {
    "class": "net.algart.executors.modules.core.files.ResolvePath"
  },
  "in_ports": [
    {
      "value_type": "scalar",
      "name": "path",
      "caption": "path",
      "hint": "[Optional] Absolute input path. If specified, it is used instead of \"Path\" parameter."
    }
  ],
  "out_ports": [
    {
      "value_type": "scalar",
      "name": "absolute_path",
      "caption": "absolute path",
      "hint": "Actual full absolute path to the result translated file/subfolder."
    },
    {
      "value_type": "scalar",
      "name": "parent_folder",
      "caption": "parent folder",
      "hint": "Absolute path to the parent folder of the specified file/subfolder."
    },
    {
      "value_type": "scalar",
      "name": "file_name",
      "caption": "file name",
      "hint": "Actual file/subfolder name."
    }
  ],
  "controls": [
    {
      "caption": "Path",
      "name": "path",
      "description": "Path to check/create, if \"Child file/path\" is empty, or path of the parent folder for resolving the child.\nNote: it MUST be an absolute path; it will NOT be resolved relative any \"current\" folder. Also and must not contain \"suspicious\" characters/substring like %, ${ etc. (excepting starting %TEMP%), because this can probably mean some \"property\" for further replacement by some functions; it should be a normal usual path.\nIf this path starts with substring %TEMP%, %TEMP%/ or %TEMP%x. where x is OS-depended file separator character, this substring is replaced with the full path to the system temp directory (System.getProperty(\"java.io.tmpdir\")) with ending file separator. So, it is correct to write here\n%TEMP%my_file.dat,\n%TEMP%/my_file.dat\nor (in Windows)\n%TEMP%\\my_file.dat\n.Any other system or executor system properties are not allowed here.",
      "value_type": "String",
      "edition_type": "folder",
      "default": ""
    },
    {
      "caption": "Child file/path",
      "name": "childPath",
      "description": "Child path. It it is not empty, it is resolved relative the previous path, and this resolved path is used for check or creation (instead of  \"Path\" above) and returned as the result path.",
      "value_type": "String",
      "edition_type": "value",
      "default": ""
    },
    {
      "caption": "Security level",
      "name": "securityLevel",
      "description": "What characters are allowed in the child path.\nNote: the sequence of 2 or more dots \"..\" is prohibited in all levels, excepting the first (no restrictions). Such a sequence is useful to refer to the parent folder, but it is obviously unsecure operation.",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "NONE",
          "caption": "any (no security restrictions)"
        },
        {
          "value": "MEDIUM",
          "caption": "medium safety: only letters, digits, spaces, '_', '-', '.' allowed"
        },
        {
          "value": "HIGH",
          "caption": "high safety: only latin A-Z, a-z, digits 0-9,spaces, '_', '-', '.' allowed"
        }
      ],
      "default": "HIGH"
    },
    {
      "caption": "What to do?",
      "name": "operation",
      "description": "What to do with the result path (after resolving the child, if specified).\nFor \"check xxx\" operations, this function throws exception if there is no existing file or folder (or if we needs a file, but it is a folder, and vice versa).\nFor \"create xxx\" operations, this function does nothing if the folder or file, requested to create, already exists.\nNote: 3 operations with parent folder (check existence, create parent, create all parents) do nothing if the specified path has no parents, i.e. if it is a root folder.",
      "value_type": "String",
      "edition_type": "enum",
      "items": [
        {
          "value": "NONE",
          "caption": "do not anything (just resolve child)"
        },
        {
          "value": "CHECK_EXISTENCE",
          "caption": "check, if the file or folder exists"
        },
        {
          "value": "CHECK_FOLDER_EXISTENCE",
          "caption": "check, if the path specifies existing folder"
        },
        {
          "value": "CHECK_FILE_EXISTENCE",
          "caption": "check, if the path specifies existing file"
        },
        {
          "value": "CHECK_PARENT_EXISTENCE",
          "caption": "check existence of parent folder of the specified path"
        },
        {
          "value": "CREATE_FOLDER",
          "caption": "create specified folder"
        },
        {
          "value": "CREATE_FILE",
          "caption": "create empty file at specified path"
        },
        {
          "value": "CREATE_PARENT",
          "caption": "create parent folder of specified file/folder"
        },
        {
          "value": "CREATE_FOLDER_WITH_PARENTS",
          "caption": "create folder with all parents"
        },
        {
          "value": "CREATE_FILE_WITH_PARENTS",
          "caption": "create empty file with all parents"
        },
        {
          "value": "CREATE_PARENTS",
          "caption": "create all parents of specified file/folder"
        }
      ],
      "default": "NONE"
    },
    {
      "caption": "Remove child extension",
      "name": "removeExtension",
      "description": "If set, this function automatically removes extension from the child file name.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": false
    }
  ]
}