{
  "app": "executor",
  "version": "0.0.1",
  "category": "logic.loops",
  "name": "repeat... while (JS)",
  "id": "c3ba4da2-01ca-4496-b9b9-3bfc8c6b8d27",
  "language": "java",
  "java": {
    "class": "net.algart.executors.modules.core.logic.loops.RepeatJS"
  },
  "in_ports": [
    {
      "value_type": "scalar",
      "name": "a"
    },
    {
      "value_type": "scalar",
      "name": "b"
    },
    {
      "value_type": "scalar",
      "name": "c"
    },
    {
      "value_type": "scalar",
      "name": "d"
    },
    {
      "value_type": "scalar",
      "name": "e"
    },
    {
      "value_type": "scalar",
      "name": "f"
    },
    {
      "value_type": "numbers",
      "name": "x1",
      "hint": "Note: this array can be used also via alternate name \"x\""
    },
    {
      "value_type": "numbers",
      "name": "x2"
    },
    {
      "value_type": "numbers",
      "name": "x3"
    }
  ],
  "out_ports": [
    {
      "value_type": "scalar",
      "name": "output",
      "hint": "Will contain the result of expression in the main \"do\" operator."
    },
    {
      "value_type": "scalar",
      "name": "is_first",
      "hint": "Will contain \"true\" if it is the first iteration of the loop; in other case will contain \"false\"."
    },
    {
      "value_type": "scalar",
      "name": "is_last",
      "hint": "Will contain \"true\" if it is the last iteration of the loop; in other case will contain \"false\".\nActually it is the inverted result of the formula, which has calculated \"while\" condition."
    },
    {
      "value_type": "scalar",
      "name": "is_not_first",
      "hint": "Will contain \"false\" if it is the first iteration of the loop; in other case will contain \"true\"."
    },
    {
      "value_type": "scalar",
      "name": "is_not_last",
      "hint": "Will contain \"false\" if it is the last iteration of the loop; in other case will contain \"true\".\nActually it is the result of the formula, which has calculated \"while\" condition."
    },
    {
      "value_type": "scalar",
      "name": "a"
    },
    {
      "value_type": "scalar",
      "name": "b"
    },
    {
      "value_type": "scalar",
      "name": "c"
    },
    {
      "value_type": "scalar",
      "name": "d"
    },
    {
      "value_type": "scalar",
      "name": "i"
    },
    {
      "value_type": "scalar",
      "name": "j"
    },
    {
      "value_type": "scalar",
      "name": "k"
    },
    {
      "value_type": "numbers",
      "name": "x1"
    },
    {
      "value_type": "numbers",
      "name": "x2"
    },
    {
      "value_type": "numbers",
      "name": "x3"
    }
  ],
  "controls": [
    {
      "name": "initializingOperator",
      "caption": "Loop initializing operator(s) (JavaScript)",
      "description": "Note: this code, as well as all JavaScript code in this function, is executed as a usual script, not as ECMAScript modules.\n\nrepeat (the following)...\n",
      "value_type": "String",
      "edition_type": "value",
      "multiline": true,
      "default": "var i = 0;"
    },
    {
      "name": "resultA",
      "caption": "Formula for output scalar \"a\" (JavaScript)",
      "value_type": "String",
      "edition_type": "value",
      "default": ""
    },
    {
      "name": "resultB",
      "caption": "Formula for output scalar \"b\" (JavaScript)",
      "value_type": "String",
      "edition_type": "value",
      "default": ""
    },
    {
      "name": "resultC",
      "caption": "Formula for output scalar \"c\" (JavaScript)",
      "value_type": "String",
      "edition_type": "value",
      "default": ""
    },
    {
      "name": "resultD",
      "caption": "Formula for output scalar \"d\" (JavaScript)",
      "value_type": "String",
      "edition_type": "value",
      "default": ""
    },
    {
      "name": "resultI",
      "caption": "Formula for output NUMBER \"i\" (JavaScript)",
      "value_type": "String",
      "edition_type": "value",
      "default": "i"
    },
    {
      "name": "resultJ",
      "caption": "Formula for output NUMBER \"j\" (JavaScript)",
      "value_type": "String",
      "edition_type": "value",
      "default": ""
    },
    {
      "name": "resultK",
      "caption": "Formula for output NUMBER \"k\" (JavaScript)",
      "value_type": "String",
      "edition_type": "value",
      "default": ""
    },
    {
      "name": "resultX1",
      "caption": "Formula for output array \"x1\" (JavaScript)",
      "value_type": "String",
      "edition_type": "value",
      "default": ""
    },
    {
      "name": "resultX2",
      "caption": "Formula for output array \"x2\" (JavaScript)",
      "value_type": "String",
      "edition_type": "value",
      "default": ""
    },
    {
      "name": "resultX3",
      "caption": "Formula for output array \"x3\" (JavaScript)",
      "value_type": "String",
      "edition_type": "value",
      "default": ""
    },
    {
      "name": "status",
      "caption": "Formula for showing system status",
      "description": "If this formula is not a blank string and, when executed, returns non-null value, then its string representation will be shown as a system status of the CALLER of this function. For example, it can be a status of some chain that calls this function to organize loop. When called without a caller (outside any chain), this status formula is ignored.",
      "value_type": "String",
      "edition_type": "value",
      "default": ""
    },
    {
      "name": "doOperator",
      "caption": "Main \"do\" operator (JavaScript)",
      "description": "(these operators are executed BEFORE formulas, that return outputs \"a\", \"b\", ...)\n\n...while:",
      "value_type": "String",
      "edition_type": "value",
      "multiline": true,
      "default": "i++"
    },
    {
      "name": "whileCondition",
      "caption": "\"while\" condition (JavaScript)",
      "description": "If this formula returned \"true\", the chain will be restarted (this formula is executed AFTER all previous operators).\nNote: here and in all other operators you can use scalar variables \"a\"–\"f\", corresponding to input ports \"a\"–\"f\", JavaScript arrays \"x1\"–\"x3\", retrieved from input ports \"x1\"–\"x3\" (with  alias \"x\" for \"x1\"), and also the special boolean variable \"isFirst\", indicating the 1st iteration of the loop.",
      "value_type": "String",
      "edition_type": "value",
      "default": "i < 10"
    },
    {
      "name": "convertInputScalarToNumber",
      "caption": "Convert input scalars to double",
      "description": "If set, the input scalars \"a\", \"b\", ... are automatically converted to double value, if it is possible (if they contain correctly written decimal real number).\nIf cleared, they are stored in JavaScript variables \"a\", \"b\", ... as string values.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": true,
      "advanced": true
    },
    {
      "name": "convertInputNumbersToArray",
      "caption": "Convert input numbers to Java arrays",
      "description": "If set, the input numbers \"x1\", \"x2\", ... are automatically converted to Java arrays (SNumbers.getArray() method).\nIf cleared, they are stored in JavaScript variables \"x1\", \"x2\", ... as original Java objects SNumbers. It allows access to all methods of SNumbers class, in particular, allows to know the number of columns (SNumbers.getBlockLength() method).",
      "value_type": "boolean",
      "edition_type": "value",
      "default": true,
      "advanced": true
    },
    {
      "name": "convertInputArraysToDouble",
      "caption": "Convert input arrays to double[]",
      "description": "If set and if the previous flag \"Convert input numbers to Java arrays\" is also set, the input arrays \"x1\", \"x2\", ... are automatically converted to double[] array (SNumbers.toDoubleArray() method).\nIf cleared, they are stored in JavaScript variables \"x1\", \"x2\", ... as Java arrays without conversions (SNumbers.getArray() method).",
      "value_type": "boolean",
      "edition_type": "value",
      "default": true
    },
    {
      "name": "convertOutputIntegersToBriefForm",
      "caption": "Convert output integer scalars to brief form",
      "description": "If set, then every of output scalars \"a\", \"b\", ..., containing floating-point value, which is ACTUALLY integer (like 2.0), will be stored in a form of integer number, i.e. \"2\" instead of \"2.0\". It can be important for further passing a value to other functions, expecting to receive an integer value as an input.",
      "value_type": "boolean",
      "edition_type": "value",
      "default": true,
      "advanced": true
    },
    {
      "name": "shareNamespace",
      "caption": "Share namespace",
      "description": "If set, all variables, defined/used in JavaScript, will be \"global\", i.e. shared with other executors in the current chain, where this flag is set also. But the namespace is never shared with OTHER chains.\nNote: sharing namespace (this flag is set) can be convenient for control the loop with help of variables from other JavaScript executors of this chain. However,\n\nWARNING! Sharing namespace can be DANGEROUS if this chain is executed in multithreading mode, i.e. several executors can be performed simultaneously. Thus, if you want to set this flag, you must:\nA) either be sure that  multithreading is disabled for this chain,\nB) or provide a chain logic (system of dependencies between executors) when this executor cannot be performed at the same time with any other JavaScript executor, which also shares its namespace.\n(Note that for this \"repeat...while\" executor the situation B) it is a typical, but in any case you must check this.)",
      "value_type": "boolean",
      "edition_type": "value",
      "default": false
    },
    {
      "name": "closeSharedContext",
      "caption": "Auto-close shared context",
      "description": "If set, this executor will automatically close JavaScript context (namespace) when it is closed itself (usually while closing the chain), EVEN it is shared with other executors (previous flag \"Share namespace\" is set). Usually is it a normal behaviour.",
      "value_type": "boolean",
      "edition_type": "value",
      "advanced": true,
      "default": true
    }
  ]
}