/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2017-2024 Daniel Alievsky, AlgART Laboratory (http://algart.net)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package net.algart.additions.math;

import java.util.function.IntConsumer;

public class IRangeFinderMeasuringTime extends IRangeFinder {
    private long timePoint = 0;
    private long timeIntervalsAddition = 0;

    /*Repeat() IRangeConsumer ==> IntConsumer;;
               rangeConsumer ==> indexConsumer
     */
    @Override
    public void findIntersecting(int min, int max, IRangeConsumer rangeConsumer) {
        long t1, t2, t3;
        if (OPTIMIZE_ADDITIONAL_SEARCH) {
            t1 = System.nanoTime();
            final int p = findContainingPointAndMinGreater(this.treeOffset, min, rangeConsumer);
            t3 = t2 = System.nanoTime();
            if (min != max) {
                findIntervalsLeftInRangeFromKnown(max, rangeConsumer, p);
                t3 = System.nanoTime();
            }
        } else {
            t1 = System.nanoTime();
            findContainingPoint(this.treeOffset, min, rangeConsumer);
            t3 = t2 = System.nanoTime();
            if (min != max) {
                findIntervalsLeftInRange(min, max, rangeConsumer);
                t3 = System.nanoTime();
            }
        }
        timePoint += t2 - t1;
        timeIntervalsAddition += t3 - t2;
    }

    /*Repeat.AutoGeneratedStart !! Auto-generated: NOT EDIT !! */
    @Override
    public void findIntersecting(int min, int max, IntConsumer indexConsumer) {
        long t1, t2, t3;
        if (OPTIMIZE_ADDITIONAL_SEARCH) {
            t1 = System.nanoTime();
            final int p = findContainingPointAndMinGreater(this.treeOffset, min, indexConsumer);
            t3 = t2 = System.nanoTime();
            if (min != max) {
                findIntervalsLeftInRangeFromKnown(max, indexConsumer, p);
                t3 = System.nanoTime();
            }
        } else {
            t1 = System.nanoTime();
            findContainingPoint(this.treeOffset, min, indexConsumer);
            t3 = t2 = System.nanoTime();
            if (min != max) {
                findIntervalsLeftInRange(min, max, indexConsumer);
                t3 = System.nanoTime();
            }
        }
        timePoint += t2 - t1;
        timeIntervalsAddition += t3 - t2;
    }

    /*Repeat.AutoGeneratedEnd*/

    public void resetTiming() {
        timePoint = 0;
        timeIntervalsAddition = 0;
    }

    public long timePoint() {
        return timePoint;
    }

    public long timeIntervalsAddition() {
        return timeIntervalsAddition;
    }

}
